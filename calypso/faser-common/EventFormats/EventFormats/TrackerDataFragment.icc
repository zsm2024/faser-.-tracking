/*
  Copyright (C) 2019-2020 CERN for the benefit of the FASER collaboration
*/

///////////////////////////////////////////////////////////////////
// TrackerDataFragment.icc, (c) FASER Detector software
///////////////////////////////////////////////////////////////////

//
// Constructor
//
inline TrackerDataFragment::TrackerDataFragment(const uint32_t *data, size_t size)
{
  m_size = size;
  event.m_event_id = 0xffffff;
  event.m_bc_id = 0xffff;
  uint32_t nextFrameCounter{0xf}; // invalid
  event.m_crc_calculated = FletcherChecksum::ReturnFletcherChecksum(data, size);

  for (size_t i = 0; i < size/4; i++)
  {
    uint32_t frameCounter {((data[i] & MASK_FRAMECNT)>>RSHIFT_FRAMECNT)};
    if ((i > 0) && (data[i] != TRB_END) && (frameCounter != nextFrameCounter))
    {
      event.m_frame_counter_invalid = true;
      break;
    }
    if (m_debug) 
    { 
      std::stringstream s;
      s << std::hex << std::setw(8) << std::setfill('0') << data[i];
      TRACE("TrackerDataFragment::TrackerDataFragment :: Tracker Word " + std::to_string(i) + " (" + std::to_string(frameCounter) + ") : " +  s.str());
    }
    nextFrameCounter = ++frameCounter % FRAME_COUNTER_CYCLE;
    if ((data[i] & MASK_WORDTYPE) == TRB_HEADER) 
    {
      if (((data[i] & MASK_TRBDATATYPE) == TRBDATATYPE_EVENTID) && event.m_event_id_missing)
      {
        event.m_event_id = data[i] & MASK_EVNTCNT;
        event.m_event_id_missing = false;
        if (m_debug) TRACE("TrackerDataFragment::TrackerDataFragment :: Word " + std::to_string(i) + " sets event_id to " + std::to_string(event.m_event_id));
        continue;
      }
      else if (data[i] == TRB_END)
      {
        if (m_debug) TRACE("TrackerDataFragment::TrackerDataFragment :: End of tracker event detected");  // not actually present in raw data
        break;
      }
      else if (((data[i] & MASK_TRBDATATYPE) == TRBDATATYPE_CRC) && event.m_crc_missing)
      {
        if (m_debug) TRACE("TrackerDataFragment::TrackerDataFragment :: Tracker CRC word detected");
        event.m_crc = data[i] & MASK_CRC;
        event.m_crc_missing = false;
        if ( i < (size/4 - 1))
        {
          if (m_debug) WARNING("TrackerDataFragment::TrackerDataFragment :: Unexpected data following CRC word will be ignored.");
        }
        break;   // for now, we are done
      }
      else
      {
        event.m_unrecognized_frames = true;
        std::stringstream s;
        s << std::hex << std::setw(8) << std::setfill('0') << data[i];
        break;
      }
    }

    if ((data[i] & MASK_WORDTYPE) == WORDTYPE_TRBDATA)
    { 
      switch(data[i] & MASK_TRBDATATYPE)
      {
        case TRBDATATYPE_BCID: 
          if (event.m_bc_id_missing)
          {
            event.m_bc_id = data[i] & MASK_BCID;
            event.m_bc_id_missing = false;
            if (m_debug) TRACE("TrackerDataFragment::TrackerDataFragment :: Word " + std::to_string(i) + " sets bc_id to " + std::to_string(event.m_bc_id) );
          }
          else
          {
            if (m_debug) WARNING("TrackerDataFragment::TrackerDataFragment :: Repeated BCID detected: " + std::to_string(data[i] & MASK_BCID) );
            // TODO: handle the error
          }
          break;
        case TRBDATATYPE_TRBERROR:        
          event.m_trb_error_id = data[i] & MASK_ERROR;
          event.m_has_trb_error = true;  // Can this occur more than once?
          break;
        case TRBDATATYPE_MODULEERROR_LED:
        case TRBDATATYPE_MODULEERROR_LEDX:
          uint32_t module = (data[i] & MASK_TRBDATA_MODULEID) >> RSHIFT_TRBDATA_MODULEID;
          uint32_t channel = (data[i] & MASK_TRBDATA_ERRORCHANNEL) >> RSHIFT_TRBDATA_ERRORCHANNEL;
          uint32_t error = data[i] & MASK_ERROR;
          event.m_module_error_ids.push_back( (channel << LSHIFT_ERROR_CHANNEL) | (module << LSHIFT_ERROR_MODULE) | error );
          break;
      }
    }
    
    if ((data[i] & MASK_WORDTYPE) == WORDTYPE_MODULEDATA_LED || (data[i] & MASK_WORDTYPE) == WORDTYPE_MODULEDATA_LEDX)
    {
    uint8_t channel = static_cast<uint8_t>((data[i] & MASK_MODULEDATA_CHANNEL) >> RSHIFT_MODULEDATA_CHANNEL);
    uint8_t module = static_cast<uint8_t>((data[i] & MASK_MODULEDATA_MODULEID) >> RSHIFT_MODULEDATA_MODULEID);
    std::pair<uint8_t, uint8_t> key { module , channel };
    event.m_modDB[key].push_back(data[i] & MASK_MODULEDATA);
    }       
  }
  
  DecodeModuleData(event.m_modDB);

}

inline bool TrackerDataFragment::valid() const
{
  if (event.m_event_id_missing) 
  {
    if (m_debug) WARNING("TrackerDataFragment::valid :: event_id missing.");
    return false;
  }
  if (event.m_bc_id_missing) 
  {
    if (m_debug) WARNING("TrackerDataFragment::valid :: bc_id missing.");
    return false;
  }
  if (event.m_crc_missing)
  {
    if (m_debug) WARNING("TrackerDataFragment::valid :: crc missing.");
    return false;
  }
  if (event.m_crc != event.m_crc_calculated)
  {
    if (m_debug) WARNING("TrackerDataFragment::valid :: mismatching checksum.");
    return false;
  }
  if (event.m_has_trb_error)
  {
    if (m_debug) WARNING("TrackerDataFragment::valid :: trb_error: " + std::to_string(event.m_trb_error_id));
    return false;                // TRB error
  }
  if (event.m_module_error_ids.size() > 0)
  {
    if (m_debug) WARNING("TrackerDataFragment::valid :: #module errors: " + std::to_string(event.m_module_error_ids.size()) );
    return false;  // module error(s)
  }
  if (event.m_frame_counter_invalid)
  {
    if (m_debug) WARNING("TrackerDataFragment::valid :: frame counter invalid.");
    return false;
  }
  if (event.m_unrecognized_frames)
  {
    if (m_debug) WARNING("TrackerDataFragment::valid :: found invalid frames.");
    return false;
  }
  return true;
}

inline void TrackerDataFragment::DecodeModuleData(std::map< std::pair<uint8_t, uint8_t>, std::vector<uint32_t> > dataMap)
{
  for (uint8_t module = 0; module < MODULES_PER_FRAGMENT; module++)
  {
    std::shared_ptr<SCTEvent> sctEvent(nullptr);
    for (uint8_t LED = 0; LED < SIDES_PER_MODULE; LED++)
    {
      if (m_debug) TRACE("TrackerDataFragment::DecodeModuleData :: Decoding data for (" + std::to_string(static_cast<uint32_t>(module)) + "," + std::to_string(static_cast<uint32_t>(LED)) + ")." );
      

      bool praeambleFound = false;
      std::pair<uint8_t, uint8_t> ModuleSide { module, LED };
      Bitstream bitstream(dataMap[ModuleSide]); //something with moduleData[module] in ()
      int removedBits = 0;

      // auto time_start = std::chrono::high_resolution_clock::now();
      // auto time_end = std::chrono::high_resolution_clock::now();
      // long int eventCount = 0;
      bool first=true;
      while (bitstream.BitsAvailable())
      {
        if (m_debug)
        {
          std::stringstream s;
	  s << " " << std::dec << std::bitset<32>(bitstream.GetWord32());
          TRACE("TrackerDataFragment::DecodeModuleData :: Data word = " + s.str());
        }
	uint32_t word32 = bitstream.GetWord32();
        if (first && ((word32 & MASK_MODULE_HEADER) != TAG_MODULE_HEADER)) {
	  if (m_debug) {
	    std::stringstream s;
	    s << " " << std::dec << std::bitset<32>(word32);
	    WARNING("Did not find header for module "+std::to_string(module)+" LED "+std::to_string(LED)+" in: "+s.str());
	  }
	  std::pair<uint8_t, uint8_t> ModuleSideOther { module, 1-LED };
	  Bitstream bitstreamOther(dataMap[ModuleSideOther]);
	  word32=bitstreamOther.GetWord32();
	}
	if (first && (LED==0)) {
	  std::pair<uint8_t, uint8_t> ModuleSideOther { module, 1-LED };
	  Bitstream bitstreamOther(dataMap[ModuleSideOther]);
	  if ((word32 & 0xFFFFE000) != (bitstreamOther.GetWord32() & 0xFFFFE000) ) {
	    if (m_debug) {
	      std::stringstream s;
	      s << " " << std::dec << std::bitset<32>(word32);
	      std::stringstream o;
	      o << " " << std::dec << std::bitset<32>(bitstreamOther.GetWord32());
	      WARNING("Different headers LED 0/1: "<<s.str()<<o.str());
	    }
	    word32=bitstreamOther.GetWord32(); //This is targeted to layer 1, module 0 problem
	  }
	}
	first=false;
        if ((word32 & MASK_MODULE_HEADER) == TAG_MODULE_HEADER){
          // eventCount++;
          // if (eventCount %5000 == 0 ){ 
          //   time_end = std::chrono::high_resolution_clock::now();
          //   auto duration = std::chrono::duration_cast<std::chrono::microseconds>(time_end-time_start);
          //   std::cout << "Decoding module data for evnt: "<<eventCount<< " rate = "<<5.0e6/duration.count()<<" kHz"<<std::endl;
          //   time_start = std::chrono::high_resolution_clock::now();
          // }
          unsigned int l1id = ((word32 >> RSHIFT_MODULE_L1ID)&MASK_MODULE_L1ID);
          unsigned int bcid = ((word32 >> RSHIFT_MODULE_BCID)&MASK_MODULE_BCID);
          if (m_debug) 
          {
            TRACE("TrackerDataFragment::DecodeModuleData :: Module Header: L1D = " + std::to_string(l1id)  + " BCID = " + std::to_string(bcid));
            TRACE("TrackerDataFragment::DecodeModuleData ::      removed bits bfore finding Module Header = " + std::to_string(removedBits) );
          }
	  if (removedBits!=0) {
	    WARNING("Had to remove " + std::to_string(removedBits) + " bits to find module header");
	  }
          if (LED==0)
          {
            // process first half of module data (led / ledx line)
            if (event.GetModule(module) != nullptr) { ERROR("LED data already existed for this module. This shouldn't happen, and may lead to missing hit data!");}
            sctEvent = std::make_shared<SCTEvent>(module, l1id, bcid);
            event.SetModule(module, sctEvent);
            if (m_debug) TRACE("TrackerDataFragment::DecodeModuleData :: Added SCTEvent data object for (" + std::to_string(static_cast<uint32_t>(module)) + "," + std::to_string(static_cast<uint32_t>(LED)) + ").");
          }
          else
          {
            sctEvent = event.GetModule(module);
            if (sctEvent == nullptr) {
              sctEvent = std::make_shared<SCTEvent>(module, l1id, bcid);
              event.SetModule(module, sctEvent);}

            if (m_debug && (sctEvent != nullptr)) TRACE("TrackerDataFragment::DecodeModuleData :: Found SCTEvent data object for (" + std::to_string(static_cast<uint32_t>(module)) + "," + std::to_string(static_cast<uint32_t>(LED)) + ").");
          }
          
          removedBits = 0;
          bitstream.RemoveBits(19);
          praeambleFound = true;
          continue;
        }
        if (praeambleFound && (sctEvent == nullptr))
        {
          if (m_debug) WARNING("TrackerDataFragment::DecodeModuleData :: SCTEvent data object for (" + std::to_string(static_cast<uint32_t>(module)) + "," + std::to_string(static_cast<uint32_t>(LED)) + ") not found.");
          praeambleFound = false;
        }
        if (!praeambleFound)
        {
          bitstream.RemoveBits(1);
          removedBits++;
          continue;
        }
        if ((bitstream.GetWord32() & MASK_MODULE_ERROR) == TAG_MODULE_ERROR && praeambleFound)
        {
          unsigned int chip = ((bitstream.GetWord32() >> RSHIFT_CHIPADD_ERR)&MASK_CHIPADD_ERR);
          unsigned int err = ((bitstream.GetWord32() >> RSHIFT_ERR)&MASK_ERR);
          if (m_debug) 
          {
            std::stringstream s;
            s << std::hex << err;
            ERROR("TrackerDataFragment::DecodeModuleData :: Module Data: ERROR code 0x" + s.str() + " for chip " + std::to_string(chip));
          }
          if (sctEvent->ChipIsValid(chip)) sctEvent->AddError(chip, err);
          bitstream.RemoveBits(11);
          continue;
        }
        if ((bitstream.GetWord32() & MASK_MODULE_CONFIG) == TAG_MODULE_CONFIG && praeambleFound)
        {
	  if (m_debug) TRACE("remove 28 bits for module config");
          bitstream.RemoveBits(28);
          continue;
        }
        if ((bitstream.GetWord32() & MASK_MODULE_DATA) == TAG_MODULE_DATA && praeambleFound)
        {
          unsigned int chip = ((bitstream.GetWord32() >> RSHIFT_CHIPADD_DATA)&MASK_CHIPADD_DATA);
          unsigned int channel = ((bitstream.GetWord32() >> RSHIFT_CHANNEL_DATA)&MASK_CHANNEL_DATA);
	  if (m_debug) TRACE("Found chip "+std::to_string(chip)+ " channel "+std::to_string(channel));
          bitstream.RemoveBits(13); // after that we expect n-times <1><xxx> => check MSB to be 1
	  uint32_t word32 = bitstream.GetWord32();
	  if ( (word32 & 0x80000000) != 0x80000000) {
	    channel |= 0x7; //expect bitflip caused this which might have deleted earlier bits - WARNING - this is valid for L1M0
	    if (m_debug) {
	      std::stringstream s;
	      s << " " << std::dec << std::bitset<32>(word32);
	      WARNING("Missing leading bit for chip " + std::to_string(chip) + " channel "+std::to_string(channel)+" :"+s.str());
	    }
	    word32|=0x80000000; //set the missing bit - can't do anything about module hit
	  }

	  int cntHits=0;
          while ( ((word32 & 0x80000000) == 0x80000000) )
          {
            // data packet
            // !!! Trailer looks the same in this definition! => Always check if a trailer is found
            if ((bitstream.GetWord32() & MASK_MODULE_TRAILER) == TAG_MODULE_TRAILER)
            {
              if (m_debug) TRACE("TrackerDataFragment::DecodeModuleData :: Module trailer found");
              break;
            }
	    cntHits+=1;
            unsigned int hit = (bitstream.GetWord32() >> 28) & 0x7;
            if (sctEvent->ChipIsValid(chip)) sctEvent->AddHit(chip, channel++, hit);
            if (m_debug) TRACE("TrackerDataFragment::DecodeModuleData :: Hit pattern = " + std::to_string(hit) );
            bitstream.RemoveBits(4);
	    word32=bitstream.GetWord32();
          }
	  if (cntHits==0) ERROR("No hits found - should not happen");
          continue;
        }
        if ((bitstream.GetWord32() & MASK_MODULE_NODATA) == TAG_MODULE_NODATA && praeambleFound) 
        {
          if (m_debug) TRACE("TrackerDataFragment::DecodeModuleData :: No Hit packet");
          bitstream.RemoveBits(3);
          continue;
        }
	if ((bitstream.GetWord32() & MASK_MODULE_TRAILER) == TAG_MODULE_TRAILER)
          {			  
            if (m_debug) TRACE("TrackerDataFragment::DecodeModuleData :: Module trailer found");
	    
            break; //ignore anything coming after trailer... should maybe check that it is really empty
          }
	
        // data is only valid after a preamble (aka header) was found. Otherwise preamble might be mistaken as an error code
	std::stringstream s;
	s << " " << std::dec << std::bitset<32>(bitstream.GetWord32());
	if (bitstream.GetWord32()!=0&&bitstream.GetWord32()!=0x80000000) {
	  WARNING("Unable to decode bitstream: "+s.str());
	  //remove leading zero, but 1
	  while ( ((bitstream.GetWord32() & 0xC0000000) != 0x40000000) ) {//Hack based on layer 1, module 0 data
	    if (bitstream.GetWord32()==0) break;
	    bitstream.RemoveBits(1);
	  }
	  continue;
	}
        if (m_debug) TRACE("TrackerDataFragment::DecodeModuleData :: WARNING: unable to decode bitstream. Removing 1 bit until alignment is found again.");
        bitstream.RemoveBits (1);          
      }
    }
  } 
  // auto time_start = std::chrono::high_resolution_clock::now();
  // auto time_end = std::chrono::high_resolution_clock::now();
  // long int eventCount = 0;
  return;
}

//
// Constructor
//
inline Bitstream::Bitstream(std::vector<uint32_t> data) : m_currentBuffer{0}, m_bitsUsedOfNextWord{0}, m_bitsAvailable{0}
{
  m_bitstreamData = data;
  
  if (m_bitstreamData.size() == 0){
    // std::cout << "WARNING: no data passed to Bitstrem class"<<std::endl;
    m_bitsAvailable = 0;
    return;
  }
  m_currentBuffer = (m_bitstreamData[0] << (32 - m_usedBitsPerWord)); // copy element 0 to buffer
  m_bitstreamData.erase(m_bitstreamData.begin()); // remove element 0
  m_bitsAvailable = (32 - m_usedBitsPerWord);
  // now we fill the remaining bits of the buffer
  if (m_bitsUsedOfNextWord > m_usedBitsPerWord) {
    THROW(TrackerData::TrackerDataException, "Bitstream::Bitstream :: FATAL: bitsUsedOfNextWord too large!");
  }
  if (m_bitstreamData.size() == 0){ // no more data
    return;
  }
  m_bitsUsedOfNextWord = (32 - m_usedBitsPerWord);
  m_currentBuffer |= (m_bitstreamData[0] >> ( m_usedBitsPerWord-m_bitsUsedOfNextWord ));
  m_bitsAvailable = 32;
}

inline void Bitstream::RemoveBits(unsigned int n)
{
  m_currentBuffer <<= n;
  //std::cout <<"avilable words = " << m_bitstreamData.size()<<"  m_bitsAvailable = "<<std::dec<<m_bitsAvailable<<" bits used: "<<m_bitsUsedOfNextWord<<" removing "<<n<<" bits"<<std::endl;
  if (m_bitstreamData.size() == 0){
    m_bitsAvailable -= n;
    if (m_bitsAvailable < 0) m_bitsAvailable = 0;
    return;
  }
  //  now we have n free bits;
  uint32_t mask = 1;
  for (unsigned int i = 1; i < n; i++){
    mask <<= 1;
    mask |= 1;
  }
  
  if ((m_usedBitsPerWord - m_bitsUsedOfNextWord) >= n){ // still enough bits in m_bitstreamData[0] to use
    // std::cout <<"Enough usable bits in current word"<<std::endl;
    m_currentBuffer |= (m_bitstreamData[0] >> (m_usedBitsPerWord - (m_bitsUsedOfNextWord + n))) & mask;
    m_bitsUsedOfNextWord += n;
    if (m_bitsUsedOfNextWord == m_usedBitsPerWord){ // all bits of word used
      m_bitstreamData.erase(m_bitstreamData.begin());
      m_bitsUsedOfNextWord = 0;
    }
  } else { // need more bits than in next word available
    // std::cout <<"Not enough usable bits in current word. "<<std::endl;
    int missingBits = ( static_cast<int>(m_bitsUsedOfNextWord + n) - static_cast<int>(m_usedBitsPerWord));
    // std::cout << "   Left shift of word by "<<std::dec<<missingBits<<std::endl;
    
    m_currentBuffer |= (m_bitstreamData[0] << ( missingBits)) & mask;
    m_bitstreamData.erase(m_bitstreamData.begin());
    m_bitsUsedOfNextWord = 0;
    if (m_bitstreamData.size() == 0){
      m_bitsAvailable -= n-(m_usedBitsPerWord-m_bitsUsedOfNextWord) ;
      if (m_bitsAvailable < 0) m_bitsAvailable = 0;
      return; // no more data
    }
    // still need to copy n-(m_usedBitsPerWord-m_bitsUsedOfNextWord) bits
    while (missingBits - static_cast<int>(m_usedBitsPerWord) > 0){
      // copy full word, aligned with last valid bit
      // std::cout << "   Left shift of word by "<<std::dec<<(missingBits - m_usedBitsPerWord)<<std::endl;
      m_currentBuffer |= (m_bitstreamData[0] << (static_cast<uint32_t>(missingBits) - m_usedBitsPerWord) );
      missingBits -= static_cast<int>(m_usedBitsPerWord);
      m_bitstreamData.erase(m_bitstreamData.begin());
      m_bitsUsedOfNextWord = 0;
      if (m_bitstreamData.size() == 0){
        m_bitsAvailable -= n-(m_usedBitsPerWord-m_bitsUsedOfNextWord) ;
        if (m_bitsAvailable < 0) m_bitsAvailable = 0;
        return; // no more data
      }
    }
    // std::cout << "   Right shift of next word by "<<std::dec<<(m_usedBitsPerWord - missingBits )<<std::endl;
    m_currentBuffer |= (m_bitstreamData[0] >> (m_usedBitsPerWord - static_cast<uint32_t>(missingBits) ) );
    m_bitsUsedOfNextWord += static_cast<uint32_t>(missingBits);
    
  }
}

//
//  Destructor to delete allocated memory
//
inline TrackerDataFragment::TRBEvent::~TRBEvent()
{
  /*
  for (auto sctevt : m_hits_per_module)
  {
    if (sctevt != nullptr) delete sctevt;
  }
  */ // shared pointer, no longer needs to be explicitly deleted
}

inline SCTEvent::SCTEvent (uint8_t moduleID, unsigned int l1id, unsigned int bcid) 
: m_moduleID(moduleID), m_bcid(bcid), m_l1id(l1id), m_complete(true), m_missingData(false), m_bcidMismatch(false), m_hasError(false), m_chipIsValid(true)
{
  m_Hits.resize(12);
  m_Errors.resize(12);
  m_chipIDMap.insert(std::pair<unsigned int, unsigned int>(0x20, 0));
  m_chipIDMap.insert(std::pair<unsigned int, unsigned int>(0x21, 1));
  m_chipIDMap.insert(std::pair<unsigned int, unsigned int>(0x22, 2));
  m_chipIDMap.insert(std::pair<unsigned int, unsigned int>(0x23, 3));
  m_chipIDMap.insert(std::pair<unsigned int, unsigned int>(0x24, 4));
  m_chipIDMap.insert(std::pair<unsigned int, unsigned int>(0x25, 5));
  m_chipIDMap.insert(std::pair<unsigned int, unsigned int>(0x28, 6));
  m_chipIDMap.insert(std::pair<unsigned int, unsigned int>(0x29, 7));
  m_chipIDMap.insert(std::pair<unsigned int, unsigned int>(0x2a, 8));
  m_chipIDMap.insert(std::pair<unsigned int, unsigned int>(0x2b, 9));
  m_chipIDMap.insert(std::pair<unsigned int, unsigned int>(0x2c, 10));
  m_chipIDMap.insert(std::pair<unsigned int, unsigned int>(0x2d, 11));
}

/** \brief Add another header to  module. This happens of data from led and ledx lines are processed.
 *  Consistency checks on l1id and bcid are performed. If a bcid mismatch is detected BCIDMismatch()
 *  will return true afterwards. If an l1id mismatch is detected MissingData() will return true.
 *  Events are marked as complete if no mismatch is detected.
 */
inline void SCTEvent::AddHeader(unsigned int l1id, unsigned int bcid)
{
  if (m_l1id == l1id && m_bcid == bcid){
    this->SetComplete();
    return;
  }
  if (m_l1id != l1id){
    m_complete = false;
    m_missingData = true;
  }
  if (m_bcid != bcid){
    m_bcidMismatch = true;
  }
}

/** \brief Add error to module
 */
inline void SCTEvent::AddError (unsigned int chip, unsigned int err)
{
  chip |= 0x20; // Add const 2MSB of chip address
  m_hasError = true;
  auto it = m_chipIDMap.find(chip);
  if (it == m_chipIDMap.end()) {
    m_Errors.back().push_back(0xff);
    std::stringstream s;
    s << std::hex << chip;
    THROW(TrackerData::TrackerDataException, "SCTEvent::AddError :: ERROR: AddError(): passed chipID is not known! chipID = 0x" + s.str());
  }
  m_Errors[it->second].push_back(err);
}

/** \brief Add a hit to this module
 */
inline void SCTEvent::AddHit (unsigned int chip, unsigned int strip, unsigned int pattern)
{
  chip |= 0x20; // adding 2 MSB for chip address. All chips are served by "primary fiber".
  auto it = m_chipIDMap.find(chip);
  if (it == m_chipIDMap.end()) {
    // if (false){
    //   std::cout << "ERROR: AddHit(): passed chipID is not known! chipID = 0x"<<std::hex<<chip<<std::endl;
    //   std::cout << "Known IDs: "<<std::endl;
    //   for (auto it : m_chipIDMap){
    //     std::cout << " ChipID = 0x"<<std::hex<<it.first<<" Index = "<<std::dec<<it.second<<std::endl;
    //     m_Hits.back().push_back(std::make_pair(chip, strip++));
    //   }
    // }
    std::stringstream s;
    s << std::hex << chip;
    m_complete = false;
    m_missingData = true;
    THROW(TrackerData::TrackerDataException, "SCTEvent::AddHit :: ERROR: AddHit(): passed chipID is not known! chipID = 0x" + s.str());
  }
  m_Hits[it->second].push_back(std::make_pair(strip, pattern));
}

/** \brief returns number of hits found in this event in this module
 */
inline unsigned int SCTEvent::GetNHits() const
{
  unsigned int hits = 0;
  for (auto chip : m_Hits){
    hits += chip.size();
  }
  return hits;
}

/** \brief returns number of hits found in this event in the given chip
 */
inline unsigned int SCTEvent::GetNHits(size_t chip) const
{
  auto it = m_chipIDMap.find(chip);
  if (it == m_chipIDMap.end()) {
    if (chip == 0){
      return m_Hits.back().size(); // unknown chip occurences
    }
    std::stringstream s;
    s << std::hex << chip;
    THROW(TrackerData::TrackerDataException, "SCTEvent::GetNHits :: ERROR: passed chipID is not known! chipID = 0x" + s.str());
  }
  return m_Hits[it->second].size();
}

/** \brief returns hits for the given chip
 */
inline const std::vector < std::pair<uint8_t, uint8_t> >& SCTEvent::GetHits(size_t chip) const
{
  auto it = m_chipIDMap.find(chip);
  if (it == m_chipIDMap.end()) {
    std::stringstream s;
    s << std::hex << chip;
    THROW(TrackerData::TrackerDataException, "SCTEvent::GetHits :: ERROR: passed chipID is not known! chipID = 0x" + s.str());
  }
  return m_Hits[it->second];
}

/** \brief returns errors for the given chip
 */
inline const std::vector < uint8_t >& SCTEvent::GetErrors(size_t chip) const
{
  auto it = m_chipIDMap.find(chip);
  if (it == m_chipIDMap.end()) {
    std::stringstream s;
    s << std::hex << chip;
    THROW(TrackerData::TrackerDataException, "SCTEvent::GetErrors :: ERROR: passed chipID is not known! chipID = 0x" + s.str());
  }
  return m_Errors[it->second];
}

// non-member function to dump TrackerDataFragment

inline std::ostream &operator<<(std::ostream &out, const TrackerDataFragment &event) 
{
  try {
    out
    <<std::setw(11)<<" event_id: "<<std::setfill(' ')<<std::setw(32)<<event.event_id()<<std::setfill(' ')<<std::endl
    <<std::setw(11)<<" bc_id: "<<std::setfill(' ')<<std::setw(32)<<event.bc_id()<<std::setfill(' ')<<std::endl;

    out<<"   Undecoded data extracted for (module,side) pairs: ";
    for (auto entry : event.module_modDB())
    {
      out<<"(" << static_cast<uint32_t>(entry.first.first) << "," << static_cast<uint32_t>(entry.first.second) << ") ";
    }
    out<<std::endl;
    
    for (size_t module = 0; module < TrackerDataFragment::MODULES_PER_FRAGMENT; module++)
    {
      if (event.hasData(module))
      {
        auto sct = event[module];
        out << "   Module " << module << " has " << sct.GetNHits() << " decoded hits." << std::endl;
        size_t chip = 0;
        for (auto hitVector : sct.GetHits())
        {
          if (hitVector.size() == 0)
          {
            chip++;
            continue;
          }
          out << "     Chip #" << chip << " hits:" << std::endl;
          for (auto hit : hitVector)
          {
            uint8_t stripOnChip {hit.first};
            std::bitset<3> hitPattern {hit.second};
            out << "      " << "Strip: " << static_cast<size_t>(stripOnChip) << " : " << hitPattern << std::endl;
          }
          chip++;
        }
      }
    }

  } catch ( TrackerData::TrackerDataException& e ) {
    out<<e.what()<<std::endl;
    out<<"Corrupted data for Tracker data event "<<event.event_id()<<", bcid "<<event.bc_id()<<std::endl;
    out<<"Fragment size is "<<event.size()<<" bytes total"<<std::endl;
  }

 return out;
}
